plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.7.10'
}

group = 'ir.sayandevelopment'
version = findProperty("version")

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }

    maven {
        name = "sonatype-oss-snapshots1"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }

    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}

dependencies {
    implementation 'net.kyori:adventure-text-minimessage:4.11.0'
//    implementation 'org.spongepowered:configurate-hocon:4.1.2'
    implementation 'org.spongepowered:configurate-core:4.1.2'
    implementation 'org.spongepowered:configurate-yaml:4.1.2'
    compileOnly 'io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT'
    compileOnly 'com.velocitypowered:velocity-api:3.1.1'
    compileOnly 'me.clip:placeholderapi:2.11.2'
    compileOnly 'net.dv8tion:JDA:5.0.0-alpha.4'
    compileOnly files('libs/DBConnector-Velocity-1.0-all.jar')
    annotationProcessor 'com.velocitypowered:velocity-api:3.1.1'
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveFileName = findProperty("plugin-name") + " v" + findProperty("version") + ".jar"
}

jar {
    archiveFileName = findProperty("plugin-name") + " v" + findProperty("version") + " " + "unshaded" + ".jar"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks.withType(Jar) {
    destinationDirectory = file("$rootDir/bin/")
}

clean.doLast {
    file("${rootDir}/bin").deleteDir()
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
